// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: common_queries.sql

package db_access

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllOrganisations = `-- name: GetAllOrganisations :many
select organisations_id, organisations_created_at, organisations_updated_at, name, address, domain_name, client_id, contact_information, social_media_integration from billing.organisations
`

// GetAllOrganisations
//
//	select organisations_id, organisations_created_at, organisations_updated_at, name, address, domain_name, client_id, contact_information, social_media_integration from billing.organisations
func (q *Queries) GetAllOrganisations(ctx context.Context, db DBTX) ([]*BillingOrganisation, error) {
	rows, err := db.Query(ctx, getAllOrganisations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*BillingOrganisation{}
	for rows.Next() {
		var i BillingOrganisation
		if err := rows.Scan(
			&i.OrganisationsID,
			&i.OrganisationsCreatedAt,
			&i.OrganisationsUpdatedAt,
			&i.Name,
			&i.Address,
			&i.DomainName,
			&i.ClientID,
			&i.ContactInformation,
			&i.SocialMediaIntegration,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVisitMetadata = `-- name: GetVisitMetadata :one
select visits_id, visits_created_at, visits_updated_at, metadata, client_id, visitor_id, count, user_id from user_accounts.visits 
where visitor_id = $1
limit 1
`

// GetVisitMetadata
//
//	select visits_id, visits_created_at, visits_updated_at, metadata, client_id, visitor_id, count, user_id from user_accounts.visits
//	where visitor_id = $1
//	limit 1
func (q *Queries) GetVisitMetadata(ctx context.Context, db DBTX, visitorID pgtype.UUID) (*UserAccountsVisit, error) {
	row := db.QueryRow(ctx, getVisitMetadata, visitorID)
	var i UserAccountsVisit
	err := row.Scan(
		&i.VisitsID,
		&i.VisitsCreatedAt,
		&i.VisitsUpdatedAt,
		&i.Metadata,
		&i.ClientID,
		&i.VisitorID,
		&i.Count,
		&i.UserID,
	)
	return &i, err
}
