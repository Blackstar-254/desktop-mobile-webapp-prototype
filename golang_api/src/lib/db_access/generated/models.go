// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db_access

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ApptStateT string

const (
	ApptStateTAppointment ApptStateT = "appointment"
	ApptStateTConfirmed   ApptStateT = "confirmed"
	ApptStateTCancelled   ApptStateT = "cancelled"
	ApptStateTBlank       ApptStateT = "blank"
)

func (e *ApptStateT) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApptStateT(s)
	case string:
		*e = ApptStateT(s)
	default:
		return fmt.Errorf("unsupported scan type for ApptStateT: %T", src)
	}
	return nil
}

type NullApptStateT struct {
	ApptStateT ApptStateT `json:"appt_state_t"`
	Valid      bool       `json:"valid"` // Valid is true if ApptStateT is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApptStateT) Scan(value interface{}) error {
	if value == nil {
		ns.ApptStateT, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApptStateT.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApptStateT) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApptStateT), nil
}

type VisitType string

const (
	VisitTypeOutpatient         VisitType = "outpatient"
	VisitTypePostOp             VisitType = "post-op"
	VisitTypeReview             VisitType = "review"
	VisitTypeInpatientLa        VisitType = "inpatient-la"
	VisitTypeInpatientGa        VisitType = "inpatient-ga"
	VisitTypeInpatientEmergency VisitType = "inpatient-emergency"
	VisitTypeDiagnostic         VisitType = "diagnostic"
)

func (e *VisitType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VisitType(s)
	case string:
		*e = VisitType(s)
	default:
		return fmt.Errorf("unsupported scan type for VisitType: %T", src)
	}
	return nil
}

type NullVisitType struct {
	VisitType VisitType `json:"visit_type"`
	Valid     bool      `json:"valid"` // Valid is true if VisitType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVisitType) Scan(value interface{}) error {
	if value == nil {
		ns.VisitType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VisitType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVisitType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VisitType), nil
}

type ApptCal struct {
	ApptCalID        int32              `json:"appt_cal_id"`
	ApptCalCreatedAt pgtype.Timestamp   `json:"appt_cal_created_at"`
	ApptCalUpdatedAt pgtype.Timestamp   `json:"appt_cal_updated_at"`
	ApptDate         pgtype.Timestamptz `json:"appt_date"`
	PatientUuid      pgtype.UUID        `json:"patient_uuid"`
	ApptState        ApptStateT         `json:"appt_state"`
}

type Organisation struct {
	OrganisationsID        int32            `json:"organisations_id"`
	OrganisationsCreatedAt pgtype.Timestamp `json:"organisations_created_at"`
	OrganisationsUpdatedAt pgtype.Timestamp `json:"organisations_updated_at"`
	Name                   string           `json:"name"`
	Address                string           `json:"address"`
	DomainName             *string          `json:"domain_name"`
}

type PatientsFile struct {
	PatientsFileID        int32            `json:"patients_file_id"`
	PatientsFileCreatedAt pgtype.Timestamp `json:"patients_file_created_at"`
	PatientsFileUpdatedAt pgtype.Timestamp `json:"patients_file_updated_at"`
	Uuid                  uuid.UUID        `json:"uuid"`
	PatientName           string           `json:"patient_name"`
	PatientNo             string           `json:"patient_no"`
	FileNo                string           `json:"file_no"`
	Occupation            *string          `json:"occupation"`
	ContactInfo           []byte           `json:"contact_info"`
	NextOfKin             []byte           `json:"next_of_kin"`
	DateOfBirth           pgtype.Date      `json:"date_of_birth"`
}

type PaymentMethod struct {
	PaymentMethodsID        int32            `json:"payment_methods_id"`
	PaymentMethodsCreatedAt pgtype.Timestamp `json:"payment_methods_created_at"`
	PaymentMethodsUpdatedAt pgtype.Timestamp `json:"payment_methods_updated_at"`
	Name                    string           `json:"name"`
	Description             *string          `json:"description"`
	Org                     int32            `json:"org"`
}

type Pricelist struct {
	PricelistID        int32            `json:"pricelist_id"`
	PricelistCreatedAt pgtype.Timestamp `json:"pricelist_created_at"`
	PricelistUpdatedAt pgtype.Timestamp `json:"pricelist_updated_at"`
	Name               string           `json:"name"`
	PaymentMethod      int32            `json:"payment_method"`
	Description        *string          `json:"description"`
	Price              int32            `json:"price"`
	Units              string           `json:"units"`
}

type ServicesRecord struct {
	ServicesRecordsID        int32            `json:"services_records_id"`
	ServicesRecordsCreatedAt pgtype.Timestamp `json:"services_records_created_at"`
	ServicesRecordsUpdatedAt pgtype.Timestamp `json:"services_records_updated_at"`
	VisitID                  int32            `json:"visit_id"`
	ServiceID                int32            `json:"service_id"`
	Comment                  *string          `json:"comment"`
	Quantity                 int32            `json:"quantity"`
	Price                    int32            `json:"price"`
}

type TimeSheet struct {
	TimeSheetID        int32            `json:"time_sheet_id"`
	TimeSheetCreatedAt pgtype.Timestamp `json:"time_sheet_created_at"`
	TimeSheetUpdatedAt pgtype.Timestamp `json:"time_sheet_updated_at"`
	EntryTime          pgtype.Timestamp `json:"entry_time"`
	TriageTime         pgtype.Timestamp `json:"triage_time"`
	ConsultEntryTime   pgtype.Timestamp `json:"consult_entry_time"`
	ConsultExitTime    pgtype.Timestamp `json:"consult_exit_time"`
	AdmissionTime      pgtype.Timestamp `json:"admission_time"`
	TheatreEntryTime   pgtype.Timestamp `json:"theatre_entry_time"`
	TheatreExitTime    pgtype.Timestamp `json:"theatre_exit_time"`
	ExitTime           pgtype.Timestamp `json:"exit_time"`
}

type VisitRecord struct {
	VisitID        int32            `json:"visit_id"`
	VisitCreatedAt pgtype.Timestamp `json:"visit_created_at"`
	VisitUpdatedAt pgtype.Timestamp `json:"visit_updated_at"`
	Date           pgtype.Date      `json:"date"`
	Type           VisitType        `json:"type"`
	ApptID         *int32           `json:"appt_id"`
	TimeRow        int32            `json:"time_row"`
	Patient        *int32           `json:"patient"`
	CurrentAge     pgtype.Interval  `json:"current_age"`
}
