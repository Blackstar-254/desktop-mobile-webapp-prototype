// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db_access

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type PaymentMethodT string

const (
	PaymentMethodTCash         PaymentMethodT = "cash"
	PaymentMethodTMpesa        PaymentMethodT = "mpesa"
	PaymentMethodTBankTransfer PaymentMethodT = "bank_transfer"
	PaymentMethodTCheque       PaymentMethodT = "cheque"
	PaymentMethodTVisa         PaymentMethodT = "visa"
)

func (e *PaymentMethodT) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentMethodT(s)
	case string:
		*e = PaymentMethodT(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentMethodT: %T", src)
	}
	return nil
}

type NullPaymentMethodT struct {
	PaymentMethodT PaymentMethodT `json:"payment_method_t"`
	Valid          bool           `json:"valid"` // Valid is true if PaymentMethodT is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentMethodT) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentMethodT, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentMethodT.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentMethodT) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentMethodT), nil
}

type PaymentPeriodT string

const (
	PaymentPeriodTMonthly  PaymentPeriodT = "monthly"
	PaymentPeriodTWeekly   PaymentPeriodT = "weekly"
	PaymentPeriodTAnnually PaymentPeriodT = "annually"
	PaymentPeriodT3months  PaymentPeriodT = "3 months"
	PaymentPeriodT2years   PaymentPeriodT = "2 years"
	PaymentPeriodT5years   PaymentPeriodT = "5 years"
)

func (e *PaymentPeriodT) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentPeriodT(s)
	case string:
		*e = PaymentPeriodT(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentPeriodT: %T", src)
	}
	return nil
}

type NullPaymentPeriodT struct {
	PaymentPeriodT PaymentPeriodT `json:"payment_period_t"`
	Valid          bool           `json:"valid"` // Valid is true if PaymentPeriodT is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentPeriodT) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentPeriodT, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentPeriodT.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentPeriodT) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentPeriodT), nil
}

type BillingOrganisation struct {
	OrganisationsID        int32            `json:"organisations_id"`
	OrganisationsCreatedAt pgtype.Timestamp `json:"organisations_created_at"`
	OrganisationsUpdatedAt pgtype.Timestamp `json:"organisations_updated_at"`
	Name                   string           `json:"name"`
	Address                string           `json:"address"`
	DomainName             *string          `json:"domain_name"`
	ClientID               string           `json:"client_id"`
	ContactInformation     []byte           `json:"contact_information"`
	SocialMediaIntegration []byte           `json:"social_media_integration"`
}

type BillingPricelist struct {
	PricelistID        int32            `json:"pricelist_id"`
	PricelistCreatedAt pgtype.Timestamp `json:"pricelist_created_at"`
	PricelistUpdatedAt pgtype.Timestamp `json:"pricelist_updated_at"`
	Name               string           `json:"name"`
	Description        *string          `json:"description"`
	SalesPriceInCents  int32            `json:"sales_price_in_cents"`
	PaymentPeriod      PaymentPeriodT   `json:"payment_period"`
	CostInCents        int32            `json:"cost_in_cents"`
	CostPeriod         PaymentPeriodT   `json:"cost_period"`
}

type BillingTransactionsRecord struct {
	TransactionsID        int32              `json:"transactions_id"`
	TransactionsCreatedAt pgtype.Timestamp   `json:"transactions_created_at"`
	TransactionsUpdatedAt pgtype.Timestamp   `json:"transactions_updated_at"`
	Description           string             `json:"description"`
	ClientID              string             `json:"client_id"`
	CreditInCents         int32              `json:"credit_in_cents"`
	DebitInCents          int32              `json:"debit_in_cents"`
	PaymentMethod         PaymentMethodT     `json:"payment_method"`
	DiscountInCents       int32              `json:"discount_in_cents"`
	PendingPaymentInCents int32              `json:"pending_payment_in_cents"`
	NextPaymentDate       pgtype.Timestamptz `json:"next_payment_date"`
}

type ContentContactU struct {
	ContctUsID        int32            `json:"contct_us_id"`
	ContctUsCreatedAt pgtype.Timestamp `json:"contct_us_created_at"`
	ContctUsUpdatedAt pgtype.Timestamp `json:"contct_us_updated_at"`
	ClientID          string           `json:"client_id"`
	FormData          []byte           `json:"form_data"`
	VisitorID         pgtype.UUID      `json:"visitor_id"`
}

type ContentPost struct {
	PostsID        int32            `json:"posts_id"`
	PostsCreatedAt pgtype.Timestamp `json:"posts_created_at"`
	PostsUpdatedAt pgtype.Timestamp `json:"posts_updated_at"`
	Name           *string          `json:"name"`
	CreatedBy      string           `json:"created_by"`
}

type UserAccountsAccount struct {
	UserID            string  `json:"user_id"`
	Type              string  `json:"type"`
	Provider          string  `json:"provider"`
	ProviderAccountID string  `json:"provider_account_id"`
	RefreshToken      *string `json:"refresh_token"`
	AccessToken       *string `json:"access_token"`
	ExpiresAt         *int32  `json:"expires_at"`
	TokenType         *string `json:"token_type"`
	Scope             *string `json:"scope"`
	IDToken           *string `json:"id_token"`
	SessionState      *string `json:"session_state"`
}

type UserAccountsPasswordsTable struct {
	PassID        int32            `json:"pass_id"`
	PassCreatedAt pgtype.Timestamp `json:"pass_created_at"`
	PassUpdatedAt pgtype.Timestamp `json:"pass_updated_at"`
	User          *string          `json:"user"`
	Password      string           `json:"password"`
}

type UserAccountsSession struct {
	SessionToken string             `json:"session_token"`
	UserID       string             `json:"user_id"`
	Expires      pgtype.Timestamptz `json:"expires"`
}

type UserAccountsUser struct {
	ID            string             `json:"id"`
	Name          *string            `json:"name"`
	Email         string             `json:"email"`
	EmailVerified pgtype.Timestamptz `json:"email_verified"`
	Image         *string            `json:"image"`
	ClientOrg     *string            `json:"client_org"`
	ContactInfo   []byte             `json:"contact_info"`
}

type UserAccountsVerificationToken struct {
	Identifier string             `json:"identifier"`
	Token      string             `json:"token"`
	Expires    pgtype.Timestamptz `json:"expires"`
}

type UserAccountsVisit struct {
	VisitsID        int32            `json:"visits_id"`
	VisitsCreatedAt pgtype.Timestamp `json:"visits_created_at"`
	VisitsUpdatedAt pgtype.Timestamp `json:"visits_updated_at"`
	Metadata        []byte           `json:"metadata"`
	ClientID        string           `json:"client_id"`
	VisitorID       pgtype.UUID      `json:"visitor_id"`
	Count           *int32           `json:"count"`
	UserID          *string          `json:"user_id"`
}
